#include "Sr90TESTDetectorConstruction.hh"

#include "G4RunManager.hh"
#include "G4NistManager.hh"
#include "G4Box.hh"
#include "G4Cons.hh"
#include "G4Orb.hh"
#include "G4Sphere.hh"
#include "G4Tubs.hh"
#include "G4Trd.hh"
#include "G4LogicalVolume.hh"
#include "G4PVPlacement.hh"
#include "G4SystemOfUnits.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

Sr90TESTDetectorConstruction::Sr90TESTDetectorConstruction()
: G4VUserDetectorConstruction(),
  fScoringVolume(0)
{ }

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

Sr90TESTDetectorConstruction::~Sr90TESTDetectorConstruction()
{ }

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4VPhysicalVolume* Sr90TESTDetectorConstruction::Construct()
{
  // Get nist material manager
  G4NistManager* nist = G4NistManager::Instance();

  G4Material* air_mat   = nist->FindOrBuildMaterial("G4_AIR");
  G4Material* sr_mat    = nist->FindOrBuildMaterial("G4_Sr");
  G4Material* steel_mat = nist->FindOrBuildMaterial("G4_STAINLESS-STEEL");
  G4Material* plexi_mat = nist->FindOrBuildMaterial("G4_PLEXIGLASS");
  G4Material* pb_mat    = nist->FindOrBuildMaterial("G4_Pb");
  G4Material* w_mat     = nist->FindOrBuildMaterial("G4_W");
  G4Material* cu_mat    = nist->FindOrBuildMaterial("G4_Cu");


  G4Element* H  = nist->FindOrBuildElement(1);
  G4Element* C  = nist->FindOrBuildElement(6);
  G4Element* O  = nist->FindOrBuildElement(8);
  G4Element* Si = nist->FindOrBuildElement(14);
  G4double density; G4int ncomponents,natoms;
  G4Material* g10_mat = new G4Material("G10", density=1.700*g/cm3, ncomponents=4);
  g10_mat->AddElement(Si,natoms=1); g10_mat->AddElement(O,natoms=2);
  g10_mat->AddElement(C ,natoms=3); g10_mat->AddElement(H,natoms=3);

  G4Material *ArGas   = new G4Material("ArGas"  , 18, 39.948*g/mole, 1.396 *kg/m3 );

  G4double sr_R = 1*mm, sr_Z = 2*mm;
  G4double steel1_r = 1*mm, steel1_R = 3*mm;
  G4double w_Z = 0.1*mm;
  G4double steel2_Z = 6*mm;
  G4double plexi1_r = 3*mm, plexi1_R = 8*mm;
  G4double plexi1_Z = steel2_Z + sr_Z;
  G4double plexi2_Z = 20*mm;
  G4double pb1_r = 8*mm, pb1_R = 16*mm;
  G4double pb1_Z = plexi2_Z + steel2_Z + sr_Z;
  G4double pb2_Z = 8*mm;

  G4double cu_Z  =  0.035*mm;
  G4double sh_Z  =  0.400*mm; // 400 um Cu shield
  G4double g10_Z =  1.500*mm;
  G4double air_Z = 10.000*mm;
  G4double ar_Z  =  9.000*mm;

  G4double ws_Z = w_Z + sh_Z;

  G4double chamber_R  = 300.0*mm;

  G4double Zd  =   0.*deg;
  G4double Td  = 360.*deg;

  G4double world_sXY = 700.*mm;
  G4double world_sZ  = 200.*mm;

  G4Box* solidWorld = new G4Box ( "World", 0.5*world_sXY, 0.5*world_sXY, 0.5*world_sZ );
  G4Tubs* sol_Sr  = new G4Tubs(  "Sr" ,    0.*mm,      sr_R ,     0.5*sr_Z, Zd, Td);
  G4Tubs* sol_st1 = new G4Tubs( "st1" ,     sr_R,  steel1_R ,     0.5*sr_Z, Zd, Td);
  G4Tubs* sol_st2 = new G4Tubs( "st2" ,    0.*mm,  steel1_R , 0.5*steel2_Z, Zd, Td);
  G4Tubs* sol_pl1 = new G4Tubs( "pl1" , plexi1_r,  plexi1_R , 0.5*plexi1_Z, Zd, Td);
  G4Tubs* sol_pl2 = new G4Tubs( "pl2" ,    0.*mm,  plexi1_R , 0.5*plexi2_Z, Zd, Td);
  G4Tubs* sol_pb1 = new G4Tubs( "pb1" ,    pb1_r,     pb1_R ,    0.5*pb1_Z, Zd, Td);
  G4Tubs* sol_pb2 = new G4Tubs( "pb2" ,    0.*mm,     pb1_R ,    0.5*pb2_Z, Zd, Td);
  G4Tubs* sol_w   = new G4Tubs(   "W" ,    0.*mm,  steel1_R ,      0.5*w_Z, Zd, Td);
  G4Tubs* sol_cu1 = new G4Tubs( "cu1" ,    pb1_R, chamber_R ,     0.5*cu_Z, Zd, Td);
  G4Tubs* sol_shi = new G4Tubs( "shi" ,    0.*mm,     pb1_R ,     0.5*sh_Z, Zd, Td);
  G4Tubs* sol_cu2 = new G4Tubs( "cu2" ,    0.*mm, chamber_R ,     0.5*cu_Z, Zd, Td);
  G4Tubs* sol_cu3 = new G4Tubs( "cu3" ,    0.*mm, chamber_R ,     0.5*cu_Z, Zd, Td);
  G4Tubs* sol_cu4 = new G4Tubs( "cu4" ,    0.*mm, chamber_R ,     0.5*cu_Z, Zd, Td);
  G4Tubs* sol_gt1 = new G4Tubs( "gt1" ,    pb1_R, chamber_R ,    0.5*g10_Z, Zd, Td);
  G4Tubs* sol_gt2 = new G4Tubs( "gt2" ,    0.*mm, chamber_R ,    0.5*g10_Z, Zd, Td);
  G4Tubs* sol_gt3 = new G4Tubs( "gt3" ,    0.*mm, chamber_R ,    0.5*g10_Z, Zd, Td);
  G4Tubs* sol_gt4 = new G4Tubs( "gt4" ,    0.*mm, chamber_R ,    0.5*g10_Z, Zd, Td);
  G4Tubs* sol_ai1 = new G4Tubs( "ai1" ,    pb1_R, chamber_R ,    0.5*air_Z, Zd, Td);
  G4Tubs* sol_ai2 = new G4Tubs( "ai2" ,    0.*mm, chamber_R ,    0.5*air_Z, Zd, Td);
  G4Tubs* sol_Ar  = new G4Tubs(  "Ar" ,    0.*mm, chamber_R ,     0.5*ar_Z, Zd, Td);

  G4LogicalVolume* logicWorld = new G4LogicalVolume(solidWorld,air_mat, "World");
  G4LogicalVolume* log_Sr   = new G4LogicalVolume( sol_Sr  ,    sr_mat,  "Sr");
  G4LogicalVolume* log_st1  = new G4LogicalVolume( sol_st1 , steel_mat, "st1");
  G4LogicalVolume* log_st2  = new G4LogicalVolume( sol_st2 , steel_mat, "st2");
  G4LogicalVolume* log_pl1  = new G4LogicalVolume( sol_pl1 , plexi_mat, "pl1");
  G4LogicalVolume* log_pl2  = new G4LogicalVolume( sol_pl2 , plexi_mat, "pl2");
  G4LogicalVolume* log_pb1  = new G4LogicalVolume( sol_pb1 ,    pb_mat, "pb1");
  G4LogicalVolume* log_pb2  = new G4LogicalVolume( sol_pb2 ,    pb_mat, "pb2");
  G4LogicalVolume* log_w    = new G4LogicalVolume( sol_w   ,     w_mat,   "W");
  G4LogicalVolume* log_shi  = new G4LogicalVolume( sol_shi ,    cu_mat, "shi");
  G4LogicalVolume* log_cu1  = new G4LogicalVolume( sol_cu1 ,    cu_mat, "cu1");
  G4LogicalVolume* log_cu2  = new G4LogicalVolume( sol_cu2 ,    cu_mat, "cu2");
  G4LogicalVolume* log_cu3  = new G4LogicalVolume( sol_cu3 ,    cu_mat, "cu3");
  G4LogicalVolume* log_cu4  = new G4LogicalVolume( sol_cu4 ,    cu_mat, "cu4");
  G4LogicalVolume* log_gt1  = new G4LogicalVolume( sol_gt1 ,   g10_mat, "gt1");
  G4LogicalVolume* log_gt2  = new G4LogicalVolume( sol_gt2 ,   g10_mat, "gt2");
  G4LogicalVolume* log_gt3  = new G4LogicalVolume( sol_gt3 ,   g10_mat, "gt3");
  G4LogicalVolume* log_gt4  = new G4LogicalVolume( sol_gt4 ,   g10_mat, "gt4");
  G4LogicalVolume* log_ai1  = new G4LogicalVolume( sol_ai1 ,   air_mat, "ai1");
  G4LogicalVolume* log_ai2  = new G4LogicalVolume( sol_ai2 ,   air_mat, "ai2");
  G4LogicalVolume* log_Ar   = new G4LogicalVolume( sol_Ar  ,     ArGas,  "Ar");

  G4double cga   =       cu_Z+g10_Z+air_Z;
  G4double wcga  = ws_Z + cu_Z+g10_Z+air_Z;
  G4double edge1 = ws_Z + 2.*cu_Z+2.*g10_Z+air_Z;

  G4ThreeVector pos_world; pos_world.set(0,0,0);
  G4ThreeVector pos_Sr   ;  pos_Sr .set(0,0, -sr_Z*0.5                                );
  G4ThreeVector pos_st1  ;  pos_st1.set(0,0, -sr_Z*0.5                                );
  G4ThreeVector pos_st2  ;  pos_st2.set(0,0, -sr_Z-steel2_Z*0.5                       );
  G4ThreeVector pos_pl1  ;  pos_pl1.set(0,0, -plexi1_Z*0.5                            );
  G4ThreeVector pos_pl2  ;  pos_pl2.set(0,0, -plexi1_Z-plexi2_Z*0.5                   );
  G4ThreeVector pos_pb1  ;  pos_pb1.set(0,0, -pb1_Z*0.5                               );
  G4ThreeVector pos_pb2  ;  pos_pb2.set(0,0, -pb1_Z-pb2_Z*0.5                         );
  G4ThreeVector pos_w    ;  pos_w  .set(0,0, w_Z*0.5                                  );
  G4ThreeVector pos_shi  ;  pos_shi.set(0,0, w_Z + sh_Z*0.5                           );
  G4ThreeVector pos_cu1  ;  pos_cu1.set(0,0, ws_Z + cu_Z*0.5                      -cga);
  G4ThreeVector pos_gt1  ;  pos_gt1.set(0,0, ws_Z+cu_Z+g10_Z*0.5                  -cga);
  G4ThreeVector pos_ai1  ;  pos_ai1.set(0,0, wcga - air_Z*0.5                     -cga);
  G4ThreeVector pos_gt2  ;  pos_gt2.set(0,0, wcga + g10_Z*0.5                     -cga);
  G4ThreeVector pos_cu2  ;  pos_cu2.set(0,0, wcga + g10_Z + cu_Z*0.5              -cga);
  G4ThreeVector pos_Ar   ;  pos_Ar .set(0,0, edge1 + ar_Z*0.5                     -cga);
  G4ThreeVector pos_cu3  ;  pos_cu3.set(0,0, edge1 + ar_Z + cu_Z*0.5              -cga);
  G4ThreeVector pos_gt3  ;  pos_gt3.set(0,0, edge1 + ar_Z + cu_Z + g10_Z*0.5      -cga);
  G4ThreeVector pos_ai2  ;  pos_ai2.set(0,0, edge1 + ar_Z + cga - air_Z*0.5       -cga);
  G4ThreeVector pos_gt4  ;  pos_gt4.set(0,0, edge1 + ar_Z + cga + g10_Z*0.5       -cga);
  G4ThreeVector pos_cu4  ;  pos_cu4.set(0,0, edge1 + ar_Z + cga + g10_Z + cu_Z*0.5-cga);
  G4bool ckOv = true;


  G4VPhysicalVolume* physWorld =
     new G4PVPlacement(0, pos_world, logicWorld , "World" ,           0, false, 0, ckOv );
     new G4PVPlacement(0, pos_Sr   , log_Sr     , "Sr"    , logicWorld,  false, 0, ckOv );
     new G4PVPlacement(0, pos_st1  , log_st1    , "st1"   , logicWorld,  false, 0, ckOv );
     new G4PVPlacement(0, pos_st2  , log_st2    , "st2"   , logicWorld,  false, 0, ckOv );
     new G4PVPlacement(0, pos_pl1  , log_pl1    , "pl1"   , logicWorld,  false, 0, ckOv );
     new G4PVPlacement(0, pos_pl2  , log_pl2    , "pl2"   , logicWorld,  false, 0, ckOv );
     new G4PVPlacement(0, pos_pb1  , log_pb1    , "pb1"   , logicWorld,  false, 0, ckOv );
     new G4PVPlacement(0, pos_pb2  , log_pb2    , "pb2"   , logicWorld,  false, 0, ckOv );
     new G4PVPlacement(0, pos_w    , log_w      , "W"     , logicWorld,  false, 0, ckOv );
     new G4PVPlacement(0, pos_shi  , log_shi    , "shi"   , logicWorld,  false, 0, ckOv );
     new G4PVPlacement(0, pos_cu1  , log_cu1    , "cu1"   , logicWorld,  false, 0, ckOv );
     new G4PVPlacement(0, pos_cu2  , log_cu2    , "cu2"   , logicWorld,  false, 0, ckOv );
     new G4PVPlacement(0, pos_cu3  , log_cu3    , "cu3"   , logicWorld,  false, 0, ckOv );
     new G4PVPlacement(0, pos_cu4  , log_cu4    , "cu4"   , logicWorld,  false, 0, ckOv );
     new G4PVPlacement(0, pos_gt1  , log_gt1    , "gt1"   , logicWorld,  false, 0, ckOv );
     new G4PVPlacement(0, pos_gt2  , log_gt2    , "gt2"   , logicWorld,  false, 0, ckOv );
     new G4PVPlacement(0, pos_gt3  , log_gt3    , "gt3"   , logicWorld,  false, 0, ckOv );
     new G4PVPlacement(0, pos_gt4  , log_gt4    , "gt4"   , logicWorld,  false, 0, ckOv );
     new G4PVPlacement(0, pos_ai1  , log_ai1    , "ai1"   , logicWorld,  false, 0, ckOv );
     new G4PVPlacement(0, pos_ai2  , log_ai2    , "ai2"   , logicWorld,  false, 0, ckOv );
     new G4PVPlacement(0, pos_Ar   , log_Ar     , "Ar"    , logicWorld,  false, 0, ckOv );

//  fScoringVolume = log_Sr;
//  fScoringVolume = log_Ar;
//  fScoringVolume = log_ai1;
//  fScoringVolume = log_ai2;
//  fScoringVolume = log_st1;
//  fScoringVolume = log_st2;
//  fScoringVolume = log_pl1;
//  fScoringVolume = log_pl2;
//  fScoringVolume = log_pb1;
//  fScoringVolume = log_pb2;
//  fScoringVolume = log_gt1;
//  fScoringVolume = log_gt2;
//  fScoringVolume = log_gt3;
//  fScoringVolume = log_gt4;
//  fScoringVolume = log_cu1;
  fScoringVolume = log_cu2;
//  fScoringVolume = log_cu3;
//  fScoringVolume = log_cu4;
  return physWorld;
}

